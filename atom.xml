<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangyue-vhyt.github.io</id>
    <title>咸鱼の家</title>
    <updated>2020-04-21T06:17:11.814Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangyue-vhyt.github.io"/>
    <link rel="self" href="https://zhangyue-vhyt.github.io/atom.xml"/>
    <subtitle>海带缠潜艇，雾霾防激光。</subtitle>
    <logo>https://zhangyue-vhyt.github.io/images/avatar.png</logo>
    <icon>https://zhangyue-vhyt.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 咸鱼の家</rights>
    <entry>
        <title type="html"><![CDATA[How To Make C# Discord Bot]]></title>
        <id>https://zhangyue-vhyt.github.io/post/how-to-make-csharp-discord-bot/</id>
        <link href="https://zhangyue-vhyt.github.io/post/how-to-make-csharp-discord-bot/">
        </link>
        <updated>2020-04-18T09:23:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>此文是跟着视频 <a href="https://www.youtube.com/playlist?list=PLS6sInD7ThM0Zb8F_KBl4T_jGF1e3apsc">How To Make C# Discord Bot</a> 学习时需要注意的地方，主要是使用新方案替代视频中已经不可用的旧方案。</p>
<h1 id="how-to-make-a-c-discord-bot-setting-up-part-1"><a href="https://youtu.be/7-tyLCAO4mY">How To Make A C# Discord Bot - Setting Up - Part 1</a></h1>
<ol>
<li><code>CommandsNextModule</code> -&gt; <code>CommandsNextExtension</code></li>
<li>在定义 <code>Config</code> 对象时，使用 <code>DTO class</code> 替代视频中的 <code>struct</code>。</li>
<li>使用 <code>dotnet core 3.0+</code> 自带的 <code>System.Text.Json</code> 替代 <code>Newtonsoft.Json</code></li>
</ol>
<pre><code class="language-csharp">ConfigDTO configDTO;
using(FileStream fs = File.OpenRead(&quot;config.json&quot;))
{
    configDTO = await JsonSerializer.DeserializeAsync&lt;ConfigDTO&gt;
        (
            fs,
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
        );
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工具箱]]></title>
        <id>https://zhangyue-vhyt.github.io/post/tools/</id>
        <link href="https://zhangyue-vhyt.github.io/post/tools/">
        </link>
        <updated>2020-04-17T20:23:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="documents">Documents</h1>
<h2 id="google-docs">Google Docs</h2>
<ul>
<li><a href="https://vizzlo.com/">Vizzlo 画图工具</a></li>
</ul>
<h1 id="ai">AI</h1>
<ul>
<li><a href="https://essay.1ts.fun/">AI写论文-小论文神器</a></li>
<li><a href="https://aimwriting.mtutor.engkoo.com/#more">AI检查英语作文-微软小英爱写作</a></li>
<li><a href="https://wyc.5118.com/?t=zhihu&amp;id=20950693&amp;u=yuan_xing_ke">AI智能原创-5118大数据平台</a></li>
<li><a href="https://www.giiso.com/#/">AI写自媒体稿子-Giiso写作机器人</a></li>
<li><a href="http://jiuge.thunlp.cn/fengge.html">AI写诗-九歌</a></li>
<li><a href="https://petalica-paint.pixiv.dev/index_zh.html">AI作画-自动给画上色</a></li>
<li><a href="https://bigjpg.com/">AI无损放大图片</a></li>
<li><a href="http://duilian.msra.cn/app/couplet.aspx">AI写对联-微软对对联</a></li>
<li><a href="http://www.seeprettyface.com/index.html">AI生成照片-高颜值人脸AI生成器</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 中创建 const 常量]]></title>
        <id>https://zhangyue-vhyt.github.io/post/create-constant-in-python/</id>
        <link href="https://zhangyue-vhyt.github.io/post/create-constant-in-python/">
        </link>
        <updated>2020-04-03T20:44:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>Python 没有 <code>const</code> 关键字，想要创建常量只能自己想办法。<br>
这篇笔记介绍的是使用私有变量、单例模式、只读属性和不可变类型创建一个 <code>Constant</code> 类，在其中储存和调用所需要的常量值。</p>
<h1 id="私有变量">私有变量<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h1>
<p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线 <code>__</code>，在Python中，实例的变量名如果以 <code>__</code> 开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p>
<h1 id="单例模式">单例模式<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h1>
<pre><code class="language-py">class Constant(object):
    &quot;&quot;&quot;
    A singleton class to store all constants.
    &quot;&quot;&quot;

    __instance = None

    def __new__(cls, *args, **kw):
        if cls.__instance is None:
            cls.__instance = object.__new__(cls, *args, **kw)
        return cls.__instance
</code></pre>
<h1 id="只读属性">只读属性<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h1>
<p>Python 中的属性<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>和 C# 中的属性是同一个概念。</p>
<pre><code class="language-py">class People:

    def __init__(self, name, age):
        self.__name = name
        self.__age = age

    @property
    def age(self):
        return self.__age

    @age.setter
    def age(self, age):
        if isinstance(age, int):
            self.__age = age
        else:
            raise ValueError

    @age.deleter
    def age(self):
        print(&quot;删除年龄数据！&quot;)

obj = People(&quot;jack&quot;, 18)
print(obj.age)
obj.age = 19
print(&quot;obj.age:  &quot;, obj.age)
del obj.age

---------------------------
打印结果：
18
obj.age:   19
删除年龄数据！
</code></pre>
<p>那么如何将一个普通的方法转换为一个“伪装”的属性呢？</p>
<ul>
<li>首先，在普通方法的基础上添加 <code>@property</code> 装饰器，例如上面的 <code>age()</code> 方法。这相当于一个 <code>get</code> 方法，用于获取值,决定类似 <code>result = obj.age</code> 执行什么代码。该方法仅有一个<code>self</code> 参数。</li>
<li>写一个同名的方法，添加 <code>@xxx.setter</code> 装饰器（xxx表示和上面方法一样的名字），比如例子中的第二个方法。这相当于编写了一个 <code>set</code> 方法，提供赋值功能，决定类似 <code>obj.age = ....</code> 的语句执行什么代码。</li>
<li>再写一个同名的方法，并添加 <code>@xxx.delete</code> 装饰器，比如例子中的第三个方法。用于删除功能，决定 <code>del obj.age</code> 这样的语句具体执行什么代码。</li>
</ul>
<p>简而言之，就是分别将三个方法定义为对同一个属性的获取、修改和删除。还可以定义只读属性，只需要使用 <code>@property</code> 声明 <code>get</code> 方法，不定义 <code>setter</code> 方法就是一个只读属性。</p>
<pre><code class="language-py">class Constant(object):
    def __init__(self):
        self.__val = 1

    @property
    def val(self):
        return self.__val
</code></pre>
<h1 id="不可变类型">不可变类型</h1>
<p>常量是不可变类型的子集，区别在于不可变类型的变量名可以重新绑定到其他类型上，而常量名和常量值都是不可变的。</p>
<pre><code class="language-py">a = (1, 2, 3)   # 元组是一个不可变类型
print(a)
a = 1   # 原本绑定到不可变类型的变量名可以重新绑定到其他值
print(a)

---------------------------
输出：
(1, 2, 3)
1
</code></pre>
<h2 id="不可变字典">不可变字典</h2>
<p>可变类型 <code>list</code> 和 <code>set</code> 对应的不可变类型分别为 <code>tuple</code> 和 <code>frozenset</code>。但在 <a href="https://www.python.org/dev/peps/pep-0416/#implementation">PEP 416</a> 中拒绝了不可变字典的要求。因此我们使用 Python 3.3 中引入的 <code>MappingProxyType</code> 和私有变量搭配实现不可变字典的返回。</p>
<pre><code class="language-py">from types import MappingProxyType


class Constant(object):
    &quot;&quot;&quot;
    A singleton class to store all constants.
    &quot;&quot;&quot;

    __instance = None

    def __new__(cls, *args, **kw):
        if cls.__instance is None:
            cls.__instance = object.__new__(cls, *args, **kw)
        return cls.__instance

    def __init__(self):
        self.__dict1 = {a:1, b:2}

    @property
    def dict1(self):
        return MappingProxyType(self.__dict1).copy()
</code></pre>
<h1 id="使用常量">使用常量</h1>
<p><code>Constant</code> 是一个类，所以我们需要先实例化才能使用它。</p>
<pre><code class="language-py">const = Constant()
dict1 = const.dict1
</code></pre>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496679217440">廖雪峰的 Python 教程</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/37534850">Python单例模式(Singleton)的N种实现</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://cloud.tencent.com/developer/article/1365783">python <code>@property</code> 设置只读属性 重写 <code>getter</code> <code>setter</code> 方法</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://www.liujiangblog.com/course/python/46">刘江的博客教程</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑色沙漠M 导入韩服捏脸数据]]></title>
        <id>https://zhangyue-vhyt.github.io/post/bdm-beauty-transfer/</id>
        <link href="https://zhangyue-vhyt.github.io/post/bdm-beauty-transfer/">
        </link>
        <updated>2020-04-01T03:24:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="模拟器">模拟器</h1>
<p>夜神、雷电、蓝叠</p>
<h1 id="安装-es-file-explore">安装 ES File Explore</h1>
<p>直接 <code>Google Play</code> 下载</p>
<h1 id="下载-qooapp-并安装">下载 QooApp 并安装</h1>
<p>模拟器中的浏览器搜索 <code>QooApp</code>, 官网不一定下得到，可以从第三方下载</p>
<h1 id="安装黑沙">安装黑沙</h1>
<p><code>QooApp</code> 中搜索 <code>black desert mobile</code>，日韩台服都有</p>
<h1 id="运行黑沙">运行黑沙</h1>
<p>墙外无任何困难</p>
<h1 id="按作者搜索捏脸作品">按作者搜索捏脸作品</h1>
<p>需要复制作者姓名，如果是韩语并且是图片，使用 <a href="https://online.easyscreenocr.com/Home/KoreanOCR">OCR 工具</a></p>
<h1 id="导出导入-捏脸数据">导出/导入 捏脸数据</h1>
<ol>
<li>关闭游戏，关闭模拟器。</li>
<li>克隆备份模拟器。</li>
<li>在备份模拟器中开游戏。</li>
<li>导出捏脸数据。<br>
<img src="https://truth.bahamut.com.tw/s01/201812/19900231d8b37a5f62c51a6c278d32aa.JPG" alt="image" loading="lazy"></li>
<li>关闭韩服。</li>
<li>打开美服，进入角色捏脸界面，右上角缓存一下建立缓存文件。</li>
<li>打开 <code>ES File Explorer</code>。</li>
<li><code>root</code> 权限打开，导出的数据在<code>/data/data/com.pearlabyss.blackdesertm/files/res/customization</code>文件夹。第二个<code>data</code>文件夹可能会变动。</li>
<li>同样复制一份数据到 <code>/mnt/shared/Pictures</code>。<br>
<img src="https://truth.bahamut.com.tw/s01/201812/de78ecc725b5ac88bd746746881db850.JPG" alt="image" loading="lazy"></li>
<li>通过模拟器与 PC 共享文件，导出数据到 PC 以作备份。</li>
<li>将所需要的数据黏贴到<code>/data/data/com.pearlabyss.blackdesertm.gl/files/res/customization</code>。</li>
<li>打开美服，载入数据。</li>
<li>如果失败，调用备份模拟器和数据。</li>
</ol>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://forum.gamer.com.tw/C.php?bsn=32841&amp;snA=7859">【攻略】韓版、台版捏臉數據導出教學(圖多) 12/6修改</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑色沙漠M 美服 Heidel 华人公会]]></title>
        <id>https://zhangyue-vhyt.github.io/post/bdm-na-guild/</id>
        <link href="https://zhangyue-vhyt.github.io/post/bdm-na-guild/">
        </link>
        <updated>2020-03-31T16:05:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="discord">Discord</h1>
<p>手动加入 <code>discord.gg/pj5YEDj</code> 或者点击 <a href="https://discord.gg/pj5YEDj">这里</a></p>
<h1 id="微信群">微信群</h1>
<p>如有需要请在加入 Discord 之后请大佬拉进群。</p>
<h1 id="公会每日任务">公会每日任务<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h1>
<p><img src="https://zhangyue-vhyt.github.io/post-images/1585841757419.jpg" alt="" loading="lazy"><br>
<img src="https://zhangyue-vhyt.github.io/post-images/1585841764714.jpg" alt="" loading="lazy"><br>
<img src="https://zhangyue-vhyt.github.io/post-images/1585841769264.jpg" alt="" loading="lazy"></p>
<h1 id="鸣谢">鸣谢</h1>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>工会成员 FenrirWolf 制作的工会每日任务教程。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zhangyue-vhyt.github.io/post/hello-gridea/</id>
        <link href="https://zhangyue-vhyt.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>